import { AfterViewChecked, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class CKEditorComponent implements OnInit, OnDestroy, OnChanges, AfterViewChecked, ControlValueAccessor {
    private ngZone;
    private hostEl;
    private static idx;
    private ckIns;
    private innerValue;
    private identifier;
    private disabled;
    private editorInitialized;
    /**
     * Is readonly mode, default:false
     */
    readonly: boolean;
    /**
     * The ck-editor config object.
     */
    config: any;
    /**
     * The special skin, default: moono-lisa
     */
    skin: string;
    /**
     * The special language, default: en
     */
    language: string;
    /**
     * Use fullpage mode, default:false
     */
    fullPage: boolean;
    /**
     * Use inline mode, default: false
     */
    inline: boolean;
    /**
     * The editor id
     */
    id: string;
    change: EventEmitter<{}>;
    ready: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    textareaRef: ElementRef;
    private static getRandomIdentifier;
    onChange: (value: string) => void;
    onTouched: () => void;
    readonly instance: any;
    constructor(ngZone: NgZone, hostEl: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private initEditor;
    private destroyEditor;
    private updateValue;
    private documentContains;
    writeValue(value: any): void;
    registerOnChange(fn: (value: string) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState?(isDisabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CKEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CKEditorComponent, "ck-editor", ["ckEditor"], { "readonly": "readonly"; "config": "config"; "skin": "skin"; "language": "language"; "fullPage": "fullPage"; "inline": "inline"; "id": "id"; }, { "change": "change"; "ready": "ready"; "blur": "blur"; "focus": "focus"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2stZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjay1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0NoZWNrZWQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDS0VkaXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyVmlld0NoZWNrZWQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuICAgIHByaXZhdGUgbmdab25lO1xyXG4gICAgcHJpdmF0ZSBob3N0RWw7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBpZHg7XHJcbiAgICBwcml2YXRlIGNrSW5zO1xyXG4gICAgcHJpdmF0ZSBpbm5lclZhbHVlO1xyXG4gICAgcHJpdmF0ZSBpZGVudGlmaWVyO1xyXG4gICAgcHJpdmF0ZSBkaXNhYmxlZDtcclxuICAgIHByaXZhdGUgZWRpdG9ySW5pdGlhbGl6ZWQ7XHJcbiAgICAvKipcclxuICAgICAqIElzIHJlYWRvbmx5IG1vZGUsIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBjay1lZGl0b3IgY29uZmlnIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgY29uZmlnOiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzcGVjaWFsIHNraW4sIGRlZmF1bHQ6IG1vb25vLWxpc2FcclxuICAgICAqL1xyXG4gICAgc2tpbjogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3BlY2lhbCBsYW5ndWFnZSwgZGVmYXVsdDogZW5cclxuICAgICAqL1xyXG4gICAgbGFuZ3VhZ2U6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVXNlIGZ1bGxwYWdlIG1vZGUsIGRlZmF1bHQ6ZmFsc2VcclxuICAgICAqL1xyXG4gICAgZnVsbFBhZ2U6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFVzZSBpbmxpbmUgbW9kZSwgZGVmYXVsdDogZmFsc2VcclxuICAgICAqL1xyXG4gICAgaW5saW5lOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZWRpdG9yIGlkXHJcbiAgICAgKi9cclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICByZWFkeTogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIGJsdXI6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICBmb2N1czogRXZlbnRFbWl0dGVyPHt9PjtcclxuICAgIHRleHRhcmVhUmVmOiBFbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0UmFuZG9tSWRlbnRpZmllcjtcclxuICAgIG9uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIG9uVG91Y2hlZDogKCkgPT4gdm9pZDtcclxuICAgIHJlYWRvbmx5IGluc3RhbmNlOiBhbnk7XHJcbiAgICBjb25zdHJ1Y3RvcihuZ1pvbmU6IE5nWm9uZSwgaG9zdEVsOiBFbGVtZW50UmVmKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIHByaXZhdGUgaW5pdEVkaXRvcjtcclxuICAgIHByaXZhdGUgZGVzdHJveUVkaXRvcjtcclxuICAgIHByaXZhdGUgdXBkYXRlVmFsdWU7XHJcbiAgICBwcml2YXRlIGRvY3VtZW50Q29udGFpbnM7XHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZT8oaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XHJcbn1cclxuIl19